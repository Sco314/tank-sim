/**
 * exporter.js v2.1 - FIXED Component Export
 * 
 * FIXES:
 * 1. Actually creates PUMP components (was missing!)
 * 2. Corrects valve.html path to ../valve.html
 * 3. Validates all component IDs before export
 * 4. Creates boundary components (feeds/drains)
 */

const EXPORTER_VERSION = '2.1.0';
const ENGINE_VERSION = '1.0.0';

// Default engine path (can be overridden)
const DEFAULT_ENGINE_PATH = window.EXPORTER_ENGINE_PATH || '../../js';
const DEFAULT_VALVE_PATH = '../valve.html';

class SimulatorExporter {
  constructor(designer) {
    this.designer = designer;
    this.exportTimestamp = Date.now();
  }

  /**
   * Main export method
   */
  async exportSimulator(simName) {
    console.log(`📦 Exporting simulator: ${simName}`);
    
    // Validate design
    const validation = this._validateDesign();
    if (!validation.valid) {
      alert(`⚠️ Cannot export:\n\n${validation.errors.join('\n')}`);
      return;
    }
    
    // Generate files
    const files = {
      config: this._generateSystemConfig(simName),
      html: this._generateIndexHTML(simName),
      readme: this._generateREADME(simName)
    };
    
    // Download files
    this._downloadFile(`systemConfig.js`, files.config);
    this._downloadFile(`index.html`, files.html);
    this._downloadFile(`README.md`, files.readme);
    
    console.log('✅ Export complete!');
    alert(`✅ Export complete!\n\n3 files downloaded:\n- systemConfig.js\n- index.html\n- README.md`);
  }

  /**
   * Validate design before export
   */
  _validateDesign() {
    const errors = [];
    
    if (this.designer.components.size === 0) {
      errors.push('No components in design');
    }
    
    // Check for disconnected components
    const connectedIds = new Set();
    for (const conn of this.designer.connections) {
      connectedIds.add(conn.from);
      connectedIds.add(conn.to);
    }
    
    const disconnected = [];
    for (const [id, comp] of this.designer.components) {
      if (!connectedIds.has(id)) {
        disconnected.push(comp.name);
      }
    }
    
    if (disconnected.length > 0) {
      errors.push(`Disconnected components: ${disconnected.join(', ')}`);
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * Generate systemConfig.js
   */
  _generateSystemConfig(simName) {
    const cleanName = this._sanitizeName(simName);
    const config = {
      _metadata: {
        name: simName,
        version: '1.0.0',
        exportVersion: EXPORTER_VERSION,
        exported: new Date().toISOString(),
        componentCount: this.designer.components.size,
        connectionCount: this.designer.connections.length
      },
      feeds: {},
      drains: {},
      tanks: {},
      pumps: {},
      valves: {},
      pipes: {},
      pressureSensors: {},
      settings: {
        timeStep: 0.016,
        maxTimeStep: 0.1,
        gravity: 9.81,
        fluidDensity: 1000,
        updateInterval: 16,
        debugMode: false,
        logFlows: false
      }
    };

    // Process all components
    for (const [id, comp] of this.designer.components) {
      const cleanId = this._sanitizeId(id);
      const template = window.COMPONENT_LIBRARY?.[comp.key] || {};
      
      // Get connections for this component
      const inputs = this._getInputsFor(id);
      const outputs = this._getOutputsFor(id);
      
      // Create component config based on type
      if (comp.type === 'tank') {
        config.tanks[cleanId] = this._createTankConfig(comp, cleanId, inputs, outputs);
      } 
      else if (comp.type === 'pump') {
        config.pumps[cleanId] = this._createPumpConfig(comp, cleanId, template, inputs, outputs);
      }
      else if (comp.type === 'valve') {
        config.valves[cleanId] = this._createValveConfig(comp, cleanId, inputs, outputs);
      }
      else if (comp.type === 'feed') {
        config.feeds[cleanId] = this._createFeedConfig(comp, cleanId, outputs);
      }
      else if (comp.type === 'drain') {
        config.drains[cleanId] = this._createDrainConfig(comp, cleanId, inputs);
      }
    }

    // Generate pipes from connections
    config.pipes = this._generatePipes();

    // Return formatted JS
    return `/**
 * systemConfig.js - ${simName}
 * 
 * Generated by Process Simulator Designer v${EXPORTER_VERSION}
 * Export Date: ${new Date().toLocaleString()}
 * 
 * IMPORTANT: This file expects valve.html at: ${DEFAULT_VALVE_PATH}
 */

const SYSTEM_CONFIG = ${JSON.stringify(config, null, 2)};

// Validation
function validateConfig(config) {
  const errors = [];
  const allIds = new Set();
  
  // Collect all component IDs
  for (const category of ['feeds', 'drains', 'tanks', 'pumps', 'valves', 'pipes']) {
    for (const [key, item] of Object.entries(config[category] || {})) {
      if (allIds.has(item.id)) {
        errors.push(\`Duplicate ID: \${item.id}\`);
      }
      allIds.add(item.id);
    }
  }
  
  // Validate connections
  for (const category of ['feeds', 'drains', 'tanks', 'pumps', 'valves', 'pipes']) {
    for (const [key, item] of Object.entries(config[category] || {})) {
      // Check inputs
      for (const inputId of item.inputs || []) {
        if (!allIds.has(inputId) && inputId !== 'source') {
          errors.push(\`\${item.id} has invalid input: \${inputId}\`);
        }
      }
      // Check outputs
      for (const outputId of item.outputs || []) {
        if (!allIds.has(outputId) && outputId !== 'drain') {
          errors.push(\`\${item.id} has invalid output: \${outputId}\`);
        }
      }
    }
  }
  
  if (errors.length > 0) {
    console.error('❌ Configuration validation errors:', errors);
    return false;
  }
  
  console.log('✅ Configuration validated');
  return true;
}

window.SYSTEM_CONFIG = SYSTEM_CONFIG;
window.validateConfig = validateConfig;

if (validateConfig(SYSTEM_CONFIG)) {
  console.log('✅ System configuration loaded');
}`;
  }

  /**
   * Create pump configuration
   */
  _createPumpConfig(comp, cleanId, template, inputs, outputs) {
    // Determine pump type from template
    const pumpType = template.pumpType || 'fixed';
    
    return {
      id: cleanId,
      name: comp.name,
      type: 'pump',
      pumpType: pumpType,
      capacity: template.capacity || 1.0,
      efficiency: template.efficiency || 0.95,
      power: template.power || 5.5,
      initialSpeed: 0,
      cavitation: {
        enabled: false,
        triggerTime: 60,
        duration: 5,
        flowReduction: 0.3
      },
      svgElement: `#${cleanId}`,
      position: [comp.x, comp.y],
      inputs: inputs,
      outputs: outputs,
      modalTitle: `${comp.name} Control`
    };
  }

  /**
   * Create valve configuration
   */
  _createValveConfig(comp, cleanId, inputs, outputs) {
    return {
      id: cleanId,
      name: comp.name,
      type: 'valve',
      maxFlow: 1.0,
      initialPosition: 0,
      responseTime: 0.1,
      svgElement: `#${cleanId}`,
      position: [comp.x, comp.y],
      inputs: inputs,
      outputs: outputs,
      modalTitle: `${comp.name} Control`,
      iframeUrl: DEFAULT_VALVE_PATH  // FIXED: Use correct path
    };
  }

  /**
   * Create tank configuration
   */
  _createTankConfig(comp, cleanId, inputs, outputs) {
    return {
      id: cleanId,
      name: comp.name,
      type: 'tank',
      area: 1.0,
      maxHeight: 1.0,
      initialVolume: 0,
      svgElement: `#${cleanId}`,
      levelElement: `#${cleanId}LevelRect`,
      position: [comp.x, comp.y],
      inputs: inputs,
      outputs: outputs
    };
  }

  /**
   * Create feed configuration
   */
  _createFeedConfig(comp, cleanId, outputs) {
    return {
      id: cleanId,
      name: comp.name,
      type: 'feed',
      pressure: 3.0,
      maxFlow: Infinity,
      outputs: outputs,
      position: [comp.x, comp.y]
    };
  }

  /**
   * Create drain configuration
   */
  _createDrainConfig(comp, cleanId, inputs) {
    return {
      id: cleanId,
      name: comp.name,
      type: 'drain',
      backPressure: 1.0,
      capacity: Infinity,
      inputs: inputs,
      position: [comp.x, comp.y]
    };
  }

  /**
   * Generate pipe configurations from connections
   */
  _generatePipes() {
    const pipes = {};
    
    this.designer.connections.forEach((conn, idx) => {
      const fromComp = this.designer.components.get(conn.from);
      const toComp = this.designer.components.get(conn.to);
      
      if (!fromComp || !toComp) return;
      
      const pipeId = `pipe${idx + 1}`;
      pipes[pipeId] = {
        id: pipeId,
        name: `${fromComp.name} to ${toComp.name}`,
        type: 'pipe',
        diameter: 0.05,
        length: this._calculateDistance(fromComp, toComp),
        svgElement: `#${pipeId}Flow`,
        inputs: [this._sanitizeId(conn.from)],
        outputs: [this._sanitizeId(conn.to)]
      };
    });
    
    return pipes;
  }

  /**
   * Get input component IDs
   */
  _getInputsFor(componentId) {
    return this.designer.connections
      .filter(c => c.to === componentId)
      .map(c => this._sanitizeId(c.from));
  }

  /**
   * Get output component IDs
   */
  _getOutputsFor(componentId) {
    return this.designer.connections
      .filter(c => c.from === componentId)
      .map(c => this._sanitizeId(c.to));
  }

  /**
   * Calculate distance between components
   */
  _calculateDistance(comp1, comp2) {
    const dx = comp2.x - comp1.x;
    const dy = comp2.y - comp1.y;
    return Math.sqrt(dx * dx + dy * dy) / 1000; // Convert to meters
  }

  /**
   * Generate index.html
   */
  _generateIndexHTML(simName) {
    const cleanName = this._sanitizeName(simName);
    
    // Generate SVG for all components
    let componentsSVG = '';
    for (const [id, comp] of this.designer.components) {
      componentsSVG += this._generateComponentSVG(comp);
    }
    
    // Generate SVG for all pipes
    let pipesSVG = '';
    this.designer.connections.forEach((conn, idx) => {
      pipesSVG += this._generatePipeSVG(conn, idx);
    });
    
    return `<!DOCTYPE html>
<html lang="en">
<head>
  <title>${simName}</title>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <link rel="stylesheet" href="${DEFAULT_ENGINE_PATH}/style.css">

  <!-- Core Architecture -->
  <script src="${DEFAULT_ENGINE_PATH}/core/Component.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/core/FlowNetwork.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/core/ComponentManager.js" defer></script>

  <!-- Configuration -->
  <script src="systemConfig.js" defer></script>

  <!-- Boundary Components -->
  <script src="${DEFAULT_ENGINE_PATH}/components/sources/Source.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/sources/Feed.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/sinks/Sink.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/sinks/Drain.js" defer></script>

  <!-- Pump Components -->
  <script src="${DEFAULT_ENGINE_PATH}/components/pumps/Pump.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/pumps/FixedSpeedPump.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/pumps/VariableSpeedPump.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/components/pumps/ThreeSpeedPump.js" defer></script>

  <!-- Valve Components -->
  <script src="${DEFAULT_ENGINE_PATH}/components/valves/Valve.js" defer></script>

  <!-- Tank Components -->
  <script src="${DEFAULT_ENGINE_PATH}/components/tanks/Tank.js" defer></script>

  <!-- Pipe Components -->
  <script src="${DEFAULT_ENGINE_PATH}/components/pipes/Pipe.js" defer></script>

  <!-- Managers -->
  <script src="${DEFAULT_ENGINE_PATH}/managers/BoundaryManager.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/managers/PumpManager.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/managers/ValveManager.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/managers/TankManager.js" defer></script>
  <script src="${DEFAULT_ENGINE_PATH}/managers/PipeManager.js" defer></script>

  <!-- Initialize System -->
  <script defer>
    window.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        if (!window.SYSTEM_CONFIG || !window.ComponentManager) {
          console.error('❌ Core files not loaded');
          return;
        }
        
        window.componentManager = new ComponentManager(SYSTEM_CONFIG);
        window.componentManager.initialize().then(success => {
          if (success) {
            window.componentManager.start();
            console.log('✅ ${simName} initialized');
          }
        });
      }, 500);
    });
  </script>
</head>

<body>
  <button id="controlsToggle" class="controls-toggle">Controls</button>
  
  <div class="app">
    <div class="grid">
      <div class="card stage">
        <svg viewBox="0 0 1000 600" id="mainSVG">
          <title>${simName}</title>
          
          <defs>
            <linearGradient id="liquid" x1="0" y1="0" x2="0" y2="1">
              <stop offset="0%" stop-color="#7cc8ff"></stop>
              <stop offset="100%" stop-color="#2d8bd6"></stop>
            </linearGradient>
          </defs>
          
          <!-- Pipes -->
          <g id="pipes">
            ${pipesSVG}
          </g>
          
          <!-- Components -->
          <g id="components">
            ${componentsSVG}
          </g>
        </svg>
      </div>

      <aside id="controlsDrawer" class="controls-drawer" aria-hidden="true">
        <div class="controls-panel card">
          <button id="controlsClose" class="controls-close">×</button>
          <h1>${simName}</h1>
          <div class="sub">Click components to interact</div>
          
          <div class="controls">
            <div class="row">
              <button type="button" id="pauseBtn" class="btn">Pause</button>
              <button type="button" id="resetBtn" class="btn">Reset</button>
            </div>
          </div>

          <hr/>
          <h1>System Status</h1>
          <div class="kv" id="systemStatus"></div>
        </div>
      </aside>
    </div>
  </div>

  <script>
  // Controls drawer
  (function(){
    const drawer = document.getElementById('controlsDrawer');
    const toggle = document.getElementById('controlsToggle');
    const closeBtn = document.getElementById('controlsClose');
    
    toggle?.addEventListener('click', () => {
      drawer.classList.add('open');
      drawer.setAttribute('aria-hidden', 'false');
    });
    
    closeBtn?.addEventListener('click', () => {
      drawer.classList.remove('open');
      drawer.setAttribute('aria-hidden', 'true');
    });
    
    // Pause/Reset buttons
    document.getElementById('pauseBtn')?.addEventListener('click', () => {
      if (window.componentManager) {
        window.componentManager.paused ? 
          window.componentManager.resume() : 
          window.componentManager.pause();
      }
    });
    
    document.getElementById('resetBtn')?.addEventListener('click', () => {
      window.componentManager?.reset();
    });
  })();
  </script>
</body>
</html>`;
  }

  /**
   * Generate SVG for a component
   */
  _generateComponentSVG(comp) {
    const cleanId = this._sanitizeId(comp.id);
    
    if (comp.type === 'tank') {
      return `
        <g id="${cleanId}" transform="translate(${comp.x}, ${comp.y})">
          <rect x="-80" y="-90" width="160" height="180" rx="12" fill="#0e1734" stroke="#2a3d78" stroke-width="3"></rect>
          <rect id="${cleanId}LevelRect" x="-74" y="88" width="148" height="0" fill="url(#liquid)"></rect>
          <text x="0" y="-100" text-anchor="middle" fill="#9bb0ff" font-size="14">${comp.name}</text>
        </g>`;
    } 
    else if (comp.type === 'valve') {
      return `
        <g id="${cleanId}" class="valve" transform="translate(${comp.x}, ${comp.y})" tabindex="0" role="button">
          <image href="https://sco314.github.io/tank-sim/Valve-Icon-Transparent-bg.png" x="-38" y="-38" width="76" height="76" />
          <text x="0" y="-50" text-anchor="middle" fill="#9bb0ff" font-size="12">${comp.name}</text>
        </g>`;
    } 
    else if (comp.type === 'pump') {
      return `
        <g id="${cleanId}" class="pump" transform="translate(${comp.x}, ${comp.y})" tabindex="0" role="button">
          <image href="https://sco314.github.io/tank-sim/cent-pump-9-inlet-left.png" x="-60" y="-60" width="120" height="120" />
          <text x="0" y="-70" text-anchor="middle" fill="#9bb0ff" font-size="12">${comp.name}</text>
        </g>`;
    }
    else {
      const template = window.COMPONENT_LIBRARY?.[comp.key] || {};
      return `
        <g id="${cleanId}" transform="translate(${comp.x}, ${comp.y})">
          <circle r="20" fill="${template.color || '#4f46e5'}20" stroke="${template.color || '#4f46e5'}" stroke-width="2"></circle>
          <text x="0" y="5" text-anchor="middle" font-size="20">${template.icon || '?'}</text>
          <text x="0" y="-30" text-anchor="middle" fill="#9bb0ff" font-size="12">${comp.name}</text>
        </g>`;
    }
  }

  /**
   * Generate SVG for a pipe
   */
  _generatePipeSVG(conn, idx) {
    const fromComp = this.designer.components.get(conn.from);
    const toComp = this.designer.components.get(conn.to);
    
    if (!fromComp || !toComp) return '';
    
    const path = `M ${fromComp.x} ${fromComp.y} L ${toComp.x} ${toComp.y}`;
    
    return `
        <g id="pipe${idx + 1}">
          <path d="${path}" fill="none" stroke="#9bb0ff" stroke-width="20" stroke-linecap="round"></path>
          <path id="pipe${idx + 1}Flow" d="${path}" fill="none" stroke="#7cc8ff" stroke-width="8" stroke-linecap="round" class="flow"></path>
        </g>`;
  }

  /**
   * Generate README
   */
  _generateREADME(simName) {
    return `# ${simName}

Generated by Process Simulator Designer v${EXPORTER_VERSION}
Export Date: ${new Date().toLocaleString()}

## Setup Instructions

1. Create folder structure:
\`\`\`
sims/${this._sanitizeName(simName)}/
├── index.html
├── systemConfig.js
└── README.md (this file)
\`\`\`

2. Make sure valve.html is at: ${DEFAULT_VALVE_PATH}

3. Make sure engine files are at: ${DEFAULT_ENGINE_PATH}/

4. Open index.html in a web browser

## Components

- Feeds: ${this._countByType('feed')}
- Tanks: ${this._countByType('tank')}
- Pumps: ${this._countByType('pump')}
- Valves: ${this._countByType('valve')}
- Drains: ${this._countByType('drain')}
- Connections: ${this.designer.connections.length}

## Controls

- Click any component to interact with it
- Use "Controls" button to access system settings
- Pause/Reset buttons control simulation

Generated with ❤️ by Process Simulator Designer
`;
  }

  /**
   * Count components by type
   */
  _countByType(type) {
    let count = 0;
    for (const [id, comp] of this.designer.components) {
      if (comp.type === type) count++;
    }
    return count;
  }

  /**
   * Sanitize simulator name
   */
  _sanitizeName(name) {
    return name.toLowerCase().replace(/[^a-z0-9]+/g, '-');
  }

  /**
   * Sanitize ID for JavaScript
   */
  _sanitizeId(id) {
    return id.replace(/[^a-zA-Z0-9_]/g, '_');
  }

  /**
   * Download file
   */
  _downloadFile(filename, content) {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  }
}

window.SimulatorExporter = SimulatorExporter;
console.log('✅ Exporter v2.1 loaded (FIXED)');
